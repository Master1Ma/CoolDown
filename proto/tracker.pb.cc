// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracker.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Tracker {

namespace {

const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPeer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Peer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Peer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Peer_OwnType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryPeerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPeerReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadComplete_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_2eproto() {
  protobuf_AddDesc_tracker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker.proto");
  GOOGLE_CHECK(file != NULL);
  Login_descriptor_ = file->message_type(0);
  static const int Login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, loginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, messageport_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  Logout_descriptor_ = file->message_type(1);
  static const int Logout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, nodeid_),
  };
  Logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logout_descriptor_,
      Logout::default_instance_,
      Logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logout));
  QueryPeer_descriptor_ = file->message_type(2);
  static const int QueryPeer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPeer, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPeer, needcount_),
  };
  QueryPeer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPeer_descriptor_,
      QueryPeer::default_instance_,
      QueryPeer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPeer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPeer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPeer));
  Peer_descriptor_ = file->message_type(3);
  static const int Peer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, messageport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, type_),
  };
  Peer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Peer_descriptor_,
      Peer::default_instance_,
      Peer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Peer));
  Peer_OwnType_descriptor_ = Peer_descriptor_->enum_type(0);
  QueryPeerReply_descriptor_ = file->message_type(4);
  static const int QueryPeerReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPeerReply, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPeerReply, peerlist_),
  };
  QueryPeerReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPeerReply_descriptor_,
      QueryPeerReply::default_instance_,
      QueryPeerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPeerReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPeerReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPeerReply));
  DownloadComplete_descriptor_ = file->message_type(5);
  static const int DownloadComplete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadComplete, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadComplete, nodeid_),
  };
  DownloadComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadComplete_descriptor_,
      DownloadComplete::default_instance_,
      DownloadComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadComplete));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logout_descriptor_, &Logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPeer_descriptor_, &QueryPeer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Peer_descriptor_, &Peer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPeerReply_descriptor_, &QueryPeerReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadComplete_descriptor_, &DownloadComplete::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_2eproto() {
  delete Login::default_instance_;
  delete Login_reflection_;
  delete Logout::default_instance_;
  delete Logout_reflection_;
  delete QueryPeer::default_instance_;
  delete QueryPeer_reflection_;
  delete Peer::default_instance_;
  delete Peer_reflection_;
  delete QueryPeerReply::default_instance_;
  delete QueryPeerReply_reflection_;
  delete DownloadComplete::default_instance_;
  delete DownloadComplete_reflection_;
}

void protobuf_AddDesc_tracker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtracker.proto\022\007Tracker\"=\n\005Login\022\016\n\006Nod"
    "eId\030\001 \002(\t\022\017\n\007LoginIp\030\002 \001(\t\022\023\n\013MessagePor"
    "t\030\003 \001(\005\"\030\n\006Logout\022\016\n\006NodeId\030\001 \002(\t\".\n\tQue"
    "ryPeer\022\016\n\006FileId\030\001 \002(\t\022\021\n\tNeedCount\030\002 \001("
    "\005\"v\n\004Peer\022\n\n\002Ip\030\001 \002(\t\022\023\n\013MessagePort\030\002 \002"
    "(\005\022#\n\004type\030\003 \002(\0162\025.Tracker.Peer.OwnType\""
    "(\n\007OwnType\022\014\n\010COMPLETE\020\001\022\017\n\013DOWNLOADING\020"
    "\002\"A\n\016QueryPeerReply\022\016\n\006FileId\030\001 \002(\t\022\037\n\010P"
    "eerList\030\002 \003(\0132\r.Tracker.Peer\"2\n\020Download"
    "Complete\022\016\n\006FileId\030\001 \002(\t\022\016\n\006NodeId\030\002 \002(\t", 400);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker.proto", &protobuf_RegisterTypes);
  Login::default_instance_ = new Login();
  Logout::default_instance_ = new Logout();
  QueryPeer::default_instance_ = new QueryPeer();
  Peer::default_instance_ = new Peer();
  QueryPeerReply::default_instance_ = new QueryPeerReply();
  DownloadComplete::default_instance_ = new DownloadComplete();
  Login::default_instance_->InitAsDefaultInstance();
  Logout::default_instance_->InitAsDefaultInstance();
  QueryPeer::default_instance_->InitAsDefaultInstance();
  Peer::default_instance_->InitAsDefaultInstance();
  QueryPeerReply::default_instance_->InitAsDefaultInstance();
  DownloadComplete::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_2eproto {
  StaticDescriptorInitializer_tracker_2eproto() {
    protobuf_AddDesc_tracker_2eproto();
  }
} static_descriptor_initializer_tracker_2eproto_;


// ===================================================================

const ::std::string Login::_default_nodeid_;
const ::std::string Login::_default_loginip_;
#ifndef _MSC_VER
const int Login::kNodeIdFieldNumber;
const int Login::kLoginIpFieldNumber;
const int Login::kMessagePortFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = const_cast< ::std::string*>(&_default_nodeid_);
  loginip_ = const_cast< ::std::string*>(&_default_loginip_);
  messageport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  SharedDtor();
}

void Login::SharedDtor() {
  if (nodeid_ != &_default_nodeid_) {
    delete nodeid_;
  }
  if (loginip_ != &_default_loginip_) {
    delete loginip_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (nodeid_ != &_default_nodeid_) {
        nodeid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (loginip_ != &_default_loginip_) {
        loginip_->clear();
      }
    }
    messageport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string NodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LoginIp;
        break;
      }
      
      // optional string LoginIp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoginIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginip().data(), this->loginip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MessagePort;
        break;
      }
      
      // optional int32 MessagePort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MessagePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageport_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string NodeId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nodeid(), output);
  }
  
  // optional string LoginIp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->loginip(), output);
  }
  
  // optional int32 MessagePort = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messageport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string NodeId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }
  
  // optional string LoginIp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loginip(), target);
  }
  
  // optional int32 MessagePort = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messageport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string NodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid());
    }
    
    // optional string LoginIp = 2;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginip());
    }
    
    // optional int32 MessagePort = 3;
    if (has_messageport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageport());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nodeid(from.nodeid());
    }
    if (from._has_bit(1)) {
      set_loginip(from.loginip());
    }
    if (from._has_bit(2)) {
      set_messageport(from.messageport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(loginip_, other->loginip_);
    std::swap(messageport_, other->messageport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Logout::_default_nodeid_;
#ifndef _MSC_VER
const int Logout::kNodeIdFieldNumber;
#endif  // !_MSC_VER

Logout::Logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logout::InitAsDefaultInstance() {
}

Logout::Logout(const Logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logout::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = const_cast< ::std::string*>(&_default_nodeid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logout::~Logout() {
  SharedDtor();
}

void Logout::SharedDtor() {
  if (nodeid_ != &_default_nodeid_) {
    delete nodeid_;
  }
  if (this != default_instance_) {
  }
}

void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logout_descriptor_;
}

const Logout& Logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

Logout* Logout::default_instance_ = NULL;

Logout* Logout::New() const {
  return new Logout;
}

void Logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (nodeid_ != &_default_nodeid_) {
        nodeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string NodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string NodeId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nodeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string NodeId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string NodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nodeid(from.nodeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Logout::Swap(Logout* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logout_descriptor_;
  metadata.reflection = Logout_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueryPeer::_default_fileid_;
#ifndef _MSC_VER
const int QueryPeer::kFileIdFieldNumber;
const int QueryPeer::kNeedCountFieldNumber;
#endif  // !_MSC_VER

QueryPeer::QueryPeer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPeer::InitAsDefaultInstance() {
}

QueryPeer::QueryPeer(const QueryPeer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPeer::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = const_cast< ::std::string*>(&_default_fileid_);
  needcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPeer::~QueryPeer() {
  SharedDtor();
}

void QueryPeer::SharedDtor() {
  if (fileid_ != &_default_fileid_) {
    delete fileid_;
  }
  if (this != default_instance_) {
  }
}

void QueryPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPeer_descriptor_;
}

const QueryPeer& QueryPeer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

QueryPeer* QueryPeer::default_instance_ = NULL;

QueryPeer* QueryPeer::New() const {
  return new QueryPeer;
}

void QueryPeer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (fileid_ != &_default_fileid_) {
        fileid_->clear();
      }
    }
    needcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NeedCount;
        break;
      }
      
      // optional int32 NeedCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcount_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FileId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fileid(), output);
  }
  
  // optional int32 NeedCount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPeer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FileId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileid(), target);
  }
  
  // optional int32 NeedCount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPeer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FileId = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }
    
    // optional int32 NeedCount = 2;
    if (has_needcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPeer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPeer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPeer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPeer::MergeFrom(const QueryPeer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fileid(from.fileid());
    }
    if (from._has_bit(1)) {
      set_needcount(from.needcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPeer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPeer::CopyFrom(const QueryPeer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPeer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QueryPeer::Swap(QueryPeer* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(needcount_, other->needcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPeer_descriptor_;
  metadata.reflection = QueryPeer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Peer_OwnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peer_OwnType_descriptor_;
}
bool Peer_OwnType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Peer_OwnType Peer::COMPLETE;
const Peer_OwnType Peer::DOWNLOADING;
const Peer_OwnType Peer::OwnType_MIN;
const Peer_OwnType Peer::OwnType_MAX;
const int Peer::OwnType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Peer::_default_ip_;
#ifndef _MSC_VER
const int Peer::kIpFieldNumber;
const int Peer::kMessagePortFieldNumber;
const int Peer::kTypeFieldNumber;
#endif  // !_MSC_VER

Peer::Peer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Peer::InitAsDefaultInstance() {
}

Peer::Peer(const Peer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Peer::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  messageport_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Peer::~Peer() {
  SharedDtor();
}

void Peer::SharedDtor() {
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peer_descriptor_;
}

const Peer& Peer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

Peer* Peer::default_instance_ = NULL;

Peer* Peer::New() const {
  return new Peer;
}

void Peer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    messageport_ = 0;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MessagePort;
        break;
      }
      
      // required int32 MessagePort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MessagePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageport_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .Tracker.Peer.OwnType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Tracker::Peer_OwnType_IsValid(value)) {
            set_type(static_cast< ::Tracker::Peer_OwnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // required int32 MessagePort = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageport(), output);
  }
  
  // required .Tracker.Peer.OwnType type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Peer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // required int32 MessagePort = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageport(), target);
  }
  
  // required .Tracker.Peer.OwnType type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Peer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required int32 MessagePort = 2;
    if (has_messageport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageport());
    }
    
    // required .Tracker.Peer.OwnType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Peer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Peer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_messageport(from.messageport());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Peer::Swap(Peer* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(messageport_, other->messageport_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Peer_descriptor_;
  metadata.reflection = Peer_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueryPeerReply::_default_fileid_;
#ifndef _MSC_VER
const int QueryPeerReply::kFileIdFieldNumber;
const int QueryPeerReply::kPeerListFieldNumber;
#endif  // !_MSC_VER

QueryPeerReply::QueryPeerReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPeerReply::InitAsDefaultInstance() {
}

QueryPeerReply::QueryPeerReply(const QueryPeerReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPeerReply::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = const_cast< ::std::string*>(&_default_fileid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPeerReply::~QueryPeerReply() {
  SharedDtor();
}

void QueryPeerReply::SharedDtor() {
  if (fileid_ != &_default_fileid_) {
    delete fileid_;
  }
  if (this != default_instance_) {
  }
}

void QueryPeerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPeerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPeerReply_descriptor_;
}

const QueryPeerReply& QueryPeerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

QueryPeerReply* QueryPeerReply::default_instance_ = NULL;

QueryPeerReply* QueryPeerReply::New() const {
  return new QueryPeerReply;
}

void QueryPeerReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (fileid_ != &_default_fileid_) {
        fileid_->clear();
      }
    }
  }
  peerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPeerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PeerList;
        break;
      }
      
      // repeated .Tracker.Peer PeerList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PeerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PeerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPeerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FileId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fileid(), output);
  }
  
  // repeated .Tracker.Peer PeerList = 2;
  for (int i = 0; i < this->peerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peerlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPeerReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FileId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileid(), target);
  }
  
  // repeated .Tracker.Peer PeerList = 2;
  for (int i = 0; i < this->peerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->peerlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPeerReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FileId = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }
    
  }
  // repeated .Tracker.Peer PeerList = 2;
  total_size += 1 * this->peerlist_size();
  for (int i = 0; i < this->peerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peerlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPeerReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPeerReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPeerReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPeerReply::MergeFrom(const QueryPeerReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  peerlist_.MergeFrom(from.peerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPeerReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPeerReply::CopyFrom(const QueryPeerReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPeerReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < peerlist_size(); i++) {
    if (!this->peerlist(i).IsInitialized()) return false;
  }
  return true;
}

void QueryPeerReply::Swap(QueryPeerReply* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    peerlist_.Swap(&other->peerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPeerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPeerReply_descriptor_;
  metadata.reflection = QueryPeerReply_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DownloadComplete::_default_fileid_;
const ::std::string DownloadComplete::_default_nodeid_;
#ifndef _MSC_VER
const int DownloadComplete::kFileIdFieldNumber;
const int DownloadComplete::kNodeIdFieldNumber;
#endif  // !_MSC_VER

DownloadComplete::DownloadComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadComplete::InitAsDefaultInstance() {
}

DownloadComplete::DownloadComplete(const DownloadComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadComplete::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = const_cast< ::std::string*>(&_default_fileid_);
  nodeid_ = const_cast< ::std::string*>(&_default_nodeid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadComplete::~DownloadComplete() {
  SharedDtor();
}

void DownloadComplete::SharedDtor() {
  if (fileid_ != &_default_fileid_) {
    delete fileid_;
  }
  if (nodeid_ != &_default_nodeid_) {
    delete nodeid_;
  }
  if (this != default_instance_) {
  }
}

void DownloadComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadComplete_descriptor_;
}

const DownloadComplete& DownloadComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

DownloadComplete* DownloadComplete::default_instance_ = NULL;

DownloadComplete* DownloadComplete::New() const {
  return new DownloadComplete;
}

void DownloadComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (fileid_ != &_default_fileid_) {
        fileid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (nodeid_ != &_default_nodeid_) {
        nodeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NodeId;
        break;
      }
      
      // required string NodeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NodeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FileId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fileid(), output);
  }
  
  // required string NodeId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FileId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileid(), target);
  }
  
  // required string NodeId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nodeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FileId = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }
    
    // required string NodeId = 2;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadComplete::MergeFrom(const DownloadComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fileid(from.fileid());
    }
    if (from._has_bit(1)) {
      set_nodeid(from.nodeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadComplete::CopyFrom(const DownloadComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DownloadComplete::Swap(DownloadComplete* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(nodeid_, other->nodeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadComplete_descriptor_;
  metadata.reflection = DownloadComplete_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Tracker

// @@protoc_insertion_point(global_scope)
