// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker.proto

#ifndef PROTOBUF_tracker_2eproto__INCLUDED
#define PROTOBUF_tracker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Tracker {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tracker_2eproto();
void protobuf_AssignDesc_tracker_2eproto();
void protobuf_ShutdownFile_tracker_2eproto();

class Login;
class Logout;
class QueryPeer;
class Peer;
class QueryPeerReply;
class DownloadComplete;

enum Peer_OwnType {
  Peer_OwnType_COMPLETE = 1,
  Peer_OwnType_DOWNLOADING = 2
};
bool Peer_OwnType_IsValid(int value);
const Peer_OwnType Peer_OwnType_OwnType_MIN = Peer_OwnType_COMPLETE;
const Peer_OwnType Peer_OwnType_OwnType_MAX = Peer_OwnType_DOWNLOADING;
const int Peer_OwnType_OwnType_ARRAYSIZE = Peer_OwnType_OwnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Peer_OwnType_descriptor();
inline const ::std::string& Peer_OwnType_Name(Peer_OwnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Peer_OwnType_descriptor(), value);
}
inline bool Peer_OwnType_Parse(
    const ::std::string& name, Peer_OwnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Peer_OwnType>(
    Peer_OwnType_descriptor(), name, value);
}
// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();
  
  Login(const Login& from);
  
  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();
  
  void Swap(Login* other);
  
  // implements Message ----------------------------------------------
  
  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string NodeId = 1;
  inline bool has_nodeid() const;
  inline void clear_nodeid();
  static const int kNodeIdFieldNumber = 1;
  inline const ::std::string& nodeid() const;
  inline void set_nodeid(const ::std::string& value);
  inline void set_nodeid(const char* value);
  inline void set_nodeid(const char* value, size_t size);
  inline ::std::string* mutable_nodeid();
  
  // optional string LoginIp = 2;
  inline bool has_loginip() const;
  inline void clear_loginip();
  static const int kLoginIpFieldNumber = 2;
  inline const ::std::string& loginip() const;
  inline void set_loginip(const ::std::string& value);
  inline void set_loginip(const char* value);
  inline void set_loginip(const char* value, size_t size);
  inline ::std::string* mutable_loginip();
  
  // optional int32 MessagePort = 3;
  inline bool has_messageport() const;
  inline void clear_messageport();
  static const int kMessagePortFieldNumber = 3;
  inline ::google::protobuf::int32 messageport() const;
  inline void set_messageport(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Tracker.Login)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* nodeid_;
  static const ::std::string _default_nodeid_;
  ::std::string* loginip_;
  static const ::std::string _default_loginip_;
  ::google::protobuf::int32 messageport_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message {
 public:
  Logout();
  virtual ~Logout();
  
  Logout(const Logout& from);
  
  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();
  
  void Swap(Logout* other);
  
  // implements Message ----------------------------------------------
  
  Logout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string NodeId = 1;
  inline bool has_nodeid() const;
  inline void clear_nodeid();
  static const int kNodeIdFieldNumber = 1;
  inline const ::std::string& nodeid() const;
  inline void set_nodeid(const ::std::string& value);
  inline void set_nodeid(const char* value);
  inline void set_nodeid(const char* value, size_t size);
  inline ::std::string* mutable_nodeid();
  
  // @@protoc_insertion_point(class_scope:Tracker.Logout)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* nodeid_;
  static const ::std::string _default_nodeid_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Logout* default_instance_;
};
// -------------------------------------------------------------------

class QueryPeer : public ::google::protobuf::Message {
 public:
  QueryPeer();
  virtual ~QueryPeer();
  
  QueryPeer(const QueryPeer& from);
  
  inline QueryPeer& operator=(const QueryPeer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPeer& default_instance();
  
  void Swap(QueryPeer* other);
  
  // implements Message ----------------------------------------------
  
  QueryPeer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPeer& from);
  void MergeFrom(const QueryPeer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string FileId = 1;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 1;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  
  // optional int32 NeedCount = 2;
  inline bool has_needcount() const;
  inline void clear_needcount();
  static const int kNeedCountFieldNumber = 2;
  inline ::google::protobuf::int32 needcount() const;
  inline void set_needcount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Tracker.QueryPeer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* fileid_;
  static const ::std::string _default_fileid_;
  ::google::protobuf::int32 needcount_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryPeer* default_instance_;
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message {
 public:
  Peer();
  virtual ~Peer();
  
  Peer(const Peer& from);
  
  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();
  
  void Swap(Peer* other);
  
  // implements Message ----------------------------------------------
  
  Peer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Peer_OwnType OwnType;
  static const OwnType COMPLETE = Peer_OwnType_COMPLETE;
  static const OwnType DOWNLOADING = Peer_OwnType_DOWNLOADING;
  static inline bool OwnType_IsValid(int value) {
    return Peer_OwnType_IsValid(value);
  }
  static const OwnType OwnType_MIN =
    Peer_OwnType_OwnType_MIN;
  static const OwnType OwnType_MAX =
    Peer_OwnType_OwnType_MAX;
  static const int OwnType_ARRAYSIZE =
    Peer_OwnType_OwnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OwnType_descriptor() {
    return Peer_OwnType_descriptor();
  }
  static inline const ::std::string& OwnType_Name(OwnType value) {
    return Peer_OwnType_Name(value);
  }
  static inline bool OwnType_Parse(const ::std::string& name,
      OwnType* value) {
    return Peer_OwnType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string Ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  
  // required int32 MessagePort = 2;
  inline bool has_messageport() const;
  inline void clear_messageport();
  static const int kMessagePortFieldNumber = 2;
  inline ::google::protobuf::int32 messageport() const;
  inline void set_messageport(::google::protobuf::int32 value);
  
  // required .Tracker.Peer.OwnType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Tracker::Peer_OwnType type() const;
  inline void set_type(::Tracker::Peer_OwnType value);
  
  // @@protoc_insertion_point(class_scope:Tracker.Peer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* ip_;
  static const ::std::string _default_ip_;
  ::google::protobuf::int32 messageport_;
  int type_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Peer* default_instance_;
};
// -------------------------------------------------------------------

class QueryPeerReply : public ::google::protobuf::Message {
 public:
  QueryPeerReply();
  virtual ~QueryPeerReply();
  
  QueryPeerReply(const QueryPeerReply& from);
  
  inline QueryPeerReply& operator=(const QueryPeerReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPeerReply& default_instance();
  
  void Swap(QueryPeerReply* other);
  
  // implements Message ----------------------------------------------
  
  QueryPeerReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPeerReply& from);
  void MergeFrom(const QueryPeerReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string FileId = 1;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 1;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  
  // repeated .Tracker.Peer PeerList = 2;
  inline int peerlist_size() const;
  inline void clear_peerlist();
  static const int kPeerListFieldNumber = 2;
  inline const ::Tracker::Peer& peerlist(int index) const;
  inline ::Tracker::Peer* mutable_peerlist(int index);
  inline ::Tracker::Peer* add_peerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Tracker::Peer >&
      peerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tracker::Peer >*
      mutable_peerlist();
  
  // @@protoc_insertion_point(class_scope:Tracker.QueryPeerReply)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* fileid_;
  static const ::std::string _default_fileid_;
  ::google::protobuf::RepeatedPtrField< ::Tracker::Peer > peerlist_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryPeerReply* default_instance_;
};
// -------------------------------------------------------------------

class DownloadComplete : public ::google::protobuf::Message {
 public:
  DownloadComplete();
  virtual ~DownloadComplete();
  
  DownloadComplete(const DownloadComplete& from);
  
  inline DownloadComplete& operator=(const DownloadComplete& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadComplete& default_instance();
  
  void Swap(DownloadComplete* other);
  
  // implements Message ----------------------------------------------
  
  DownloadComplete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadComplete& from);
  void MergeFrom(const DownloadComplete& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string FileId = 1;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 1;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  
  // required string NodeId = 2;
  inline bool has_nodeid() const;
  inline void clear_nodeid();
  static const int kNodeIdFieldNumber = 2;
  inline const ::std::string& nodeid() const;
  inline void set_nodeid(const ::std::string& value);
  inline void set_nodeid(const char* value);
  inline void set_nodeid(const char* value, size_t size);
  inline ::std::string* mutable_nodeid();
  
  // @@protoc_insertion_point(class_scope:Tracker.DownloadComplete)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* fileid_;
  static const ::std::string _default_fileid_;
  ::std::string* nodeid_;
  static const ::std::string _default_nodeid_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownloadComplete* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// required string NodeId = 1;
inline bool Login::has_nodeid() const {
  return _has_bit(0);
}
inline void Login::clear_nodeid() {
  if (nodeid_ != &_default_nodeid_) {
    nodeid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Login::nodeid() const {
  return *nodeid_;
}
inline void Login::set_nodeid(const ::std::string& value) {
  _set_bit(0);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void Login::set_nodeid(const char* value) {
  _set_bit(0);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void Login::set_nodeid(const char* value, size_t size) {
  _set_bit(0);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_nodeid() {
  _set_bit(0);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  return nodeid_;
}

// optional string LoginIp = 2;
inline bool Login::has_loginip() const {
  return _has_bit(1);
}
inline void Login::clear_loginip() {
  if (loginip_ != &_default_loginip_) {
    loginip_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Login::loginip() const {
  return *loginip_;
}
inline void Login::set_loginip(const ::std::string& value) {
  _set_bit(1);
  if (loginip_ == &_default_loginip_) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void Login::set_loginip(const char* value) {
  _set_bit(1);
  if (loginip_ == &_default_loginip_) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void Login::set_loginip(const char* value, size_t size) {
  _set_bit(1);
  if (loginip_ == &_default_loginip_) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_loginip() {
  _set_bit(1);
  if (loginip_ == &_default_loginip_) {
    loginip_ = new ::std::string;
  }
  return loginip_;
}

// optional int32 MessagePort = 3;
inline bool Login::has_messageport() const {
  return _has_bit(2);
}
inline void Login::clear_messageport() {
  messageport_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Login::messageport() const {
  return messageport_;
}
inline void Login::set_messageport(::google::protobuf::int32 value) {
  _set_bit(2);
  messageport_ = value;
}

// -------------------------------------------------------------------

// Logout

// required string NodeId = 1;
inline bool Logout::has_nodeid() const {
  return _has_bit(0);
}
inline void Logout::clear_nodeid() {
  if (nodeid_ != &_default_nodeid_) {
    nodeid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Logout::nodeid() const {
  return *nodeid_;
}
inline void Logout::set_nodeid(const ::std::string& value) {
  _set_bit(0);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void Logout::set_nodeid(const char* value) {
  _set_bit(0);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void Logout::set_nodeid(const char* value, size_t size) {
  _set_bit(0);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logout::mutable_nodeid() {
  _set_bit(0);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  return nodeid_;
}

// -------------------------------------------------------------------

// QueryPeer

// required string FileId = 1;
inline bool QueryPeer::has_fileid() const {
  return _has_bit(0);
}
inline void QueryPeer::clear_fileid() {
  if (fileid_ != &_default_fileid_) {
    fileid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& QueryPeer::fileid() const {
  return *fileid_;
}
inline void QueryPeer::set_fileid(const ::std::string& value) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void QueryPeer::set_fileid(const char* value) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void QueryPeer::set_fileid(const char* value, size_t size) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPeer::mutable_fileid() {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  return fileid_;
}

// optional int32 NeedCount = 2;
inline bool QueryPeer::has_needcount() const {
  return _has_bit(1);
}
inline void QueryPeer::clear_needcount() {
  needcount_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 QueryPeer::needcount() const {
  return needcount_;
}
inline void QueryPeer::set_needcount(::google::protobuf::int32 value) {
  _set_bit(1);
  needcount_ = value;
}

// -------------------------------------------------------------------

// Peer

// required string Ip = 1;
inline bool Peer::has_ip() const {
  return _has_bit(0);
}
inline void Peer::clear_ip() {
  if (ip_ != &_default_ip_) {
    ip_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Peer::ip() const {
  return *ip_;
}
inline void Peer::set_ip(const ::std::string& value) {
  _set_bit(0);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Peer::set_ip(const char* value) {
  _set_bit(0);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Peer::set_ip(const char* value, size_t size) {
  _set_bit(0);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Peer::mutable_ip() {
  _set_bit(0);
  if (ip_ == &_default_ip_) {
    ip_ = new ::std::string;
  }
  return ip_;
}

// required int32 MessagePort = 2;
inline bool Peer::has_messageport() const {
  return _has_bit(1);
}
inline void Peer::clear_messageport() {
  messageport_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Peer::messageport() const {
  return messageport_;
}
inline void Peer::set_messageport(::google::protobuf::int32 value) {
  _set_bit(1);
  messageport_ = value;
}

// required .Tracker.Peer.OwnType type = 3;
inline bool Peer::has_type() const {
  return _has_bit(2);
}
inline void Peer::clear_type() {
  type_ = 1;
  _clear_bit(2);
}
inline ::Tracker::Peer_OwnType Peer::type() const {
  return static_cast< ::Tracker::Peer_OwnType >(type_);
}
inline void Peer::set_type(::Tracker::Peer_OwnType value) {
  GOOGLE_DCHECK(::Tracker::Peer_OwnType_IsValid(value));
  _set_bit(2);
  type_ = value;
}

// -------------------------------------------------------------------

// QueryPeerReply

// required string FileId = 1;
inline bool QueryPeerReply::has_fileid() const {
  return _has_bit(0);
}
inline void QueryPeerReply::clear_fileid() {
  if (fileid_ != &_default_fileid_) {
    fileid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& QueryPeerReply::fileid() const {
  return *fileid_;
}
inline void QueryPeerReply::set_fileid(const ::std::string& value) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void QueryPeerReply::set_fileid(const char* value) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void QueryPeerReply::set_fileid(const char* value, size_t size) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPeerReply::mutable_fileid() {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  return fileid_;
}

// repeated .Tracker.Peer PeerList = 2;
inline int QueryPeerReply::peerlist_size() const {
  return peerlist_.size();
}
inline void QueryPeerReply::clear_peerlist() {
  peerlist_.Clear();
}
inline const ::Tracker::Peer& QueryPeerReply::peerlist(int index) const {
  return peerlist_.Get(index);
}
inline ::Tracker::Peer* QueryPeerReply::mutable_peerlist(int index) {
  return peerlist_.Mutable(index);
}
inline ::Tracker::Peer* QueryPeerReply::add_peerlist() {
  return peerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tracker::Peer >&
QueryPeerReply::peerlist() const {
  return peerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tracker::Peer >*
QueryPeerReply::mutable_peerlist() {
  return &peerlist_;
}

// -------------------------------------------------------------------

// DownloadComplete

// required string FileId = 1;
inline bool DownloadComplete::has_fileid() const {
  return _has_bit(0);
}
inline void DownloadComplete::clear_fileid() {
  if (fileid_ != &_default_fileid_) {
    fileid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DownloadComplete::fileid() const {
  return *fileid_;
}
inline void DownloadComplete::set_fileid(const ::std::string& value) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void DownloadComplete::set_fileid(const char* value) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
}
inline void DownloadComplete::set_fileid(const char* value, size_t size) {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadComplete::mutable_fileid() {
  _set_bit(0);
  if (fileid_ == &_default_fileid_) {
    fileid_ = new ::std::string;
  }
  return fileid_;
}

// required string NodeId = 2;
inline bool DownloadComplete::has_nodeid() const {
  return _has_bit(1);
}
inline void DownloadComplete::clear_nodeid() {
  if (nodeid_ != &_default_nodeid_) {
    nodeid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DownloadComplete::nodeid() const {
  return *nodeid_;
}
inline void DownloadComplete::set_nodeid(const ::std::string& value) {
  _set_bit(1);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void DownloadComplete::set_nodeid(const char* value) {
  _set_bit(1);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void DownloadComplete::set_nodeid(const char* value, size_t size) {
  _set_bit(1);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadComplete::mutable_nodeid() {
  _set_bit(1);
  if (nodeid_ == &_default_nodeid_) {
    nodeid_ = new ::std::string;
  }
  return nodeid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Tracker

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tracker::Peer_OwnType>() {
  return ::Tracker::Peer_OwnType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tracker_2eproto__INCLUDED
